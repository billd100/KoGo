// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package kogo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ActivityClient is the client API for Activity service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActivityClient interface {
	GetBooks(ctx context.Context, in *BooksRequest, opts ...grpc.CallOption) (Activity_GetBooksClient, error)
	GetBookCount(ctx context.Context, in *BookCountRequest, opts ...grpc.CallOption) (*BookCountResponse, error)
	BackupDatabase(ctx context.Context, in *BackupDatabaseRequest, opts ...grpc.CallOption) (*BackupDatabaseResponse, error)
	OfflineSetup(ctx context.Context, in *OfflineSetupRequest, opts ...grpc.CallOption) (*OfflineSetupResponse, error)
	GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (Activity_GetUsersClient, error)
}

type activityClient struct {
	cc grpc.ClientConnInterface
}

func NewActivityClient(cc grpc.ClientConnInterface) ActivityClient {
	return &activityClient{cc}
}

func (c *activityClient) GetBooks(ctx context.Context, in *BooksRequest, opts ...grpc.CallOption) (Activity_GetBooksClient, error) {
	stream, err := c.cc.NewStream(ctx, &Activity_ServiceDesc.Streams[0], "/kogo.Activity/GetBooks", opts...)
	if err != nil {
		return nil, err
	}
	x := &activityGetBooksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Activity_GetBooksClient interface {
	Recv() (*Book, error)
	grpc.ClientStream
}

type activityGetBooksClient struct {
	grpc.ClientStream
}

func (x *activityGetBooksClient) Recv() (*Book, error) {
	m := new(Book)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *activityClient) GetBookCount(ctx context.Context, in *BookCountRequest, opts ...grpc.CallOption) (*BookCountResponse, error) {
	out := new(BookCountResponse)
	err := c.cc.Invoke(ctx, "/kogo.Activity/GetBookCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) BackupDatabase(ctx context.Context, in *BackupDatabaseRequest, opts ...grpc.CallOption) (*BackupDatabaseResponse, error) {
	out := new(BackupDatabaseResponse)
	err := c.cc.Invoke(ctx, "/kogo.Activity/BackupDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) OfflineSetup(ctx context.Context, in *OfflineSetupRequest, opts ...grpc.CallOption) (*OfflineSetupResponse, error) {
	out := new(OfflineSetupResponse)
	err := c.cc.Invoke(ctx, "/kogo.Activity/OfflineSetup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activityClient) GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (Activity_GetUsersClient, error) {
	stream, err := c.cc.NewStream(ctx, &Activity_ServiceDesc.Streams[1], "/kogo.Activity/GetUsers", opts...)
	if err != nil {
		return nil, err
	}
	x := &activityGetUsersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Activity_GetUsersClient interface {
	Recv() (*User, error)
	grpc.ClientStream
}

type activityGetUsersClient struct {
	grpc.ClientStream
}

func (x *activityGetUsersClient) Recv() (*User, error) {
	m := new(User)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ActivityServer is the server API for Activity service.
// All implementations must embed UnimplementedActivityServer
// for forward compatibility
type ActivityServer interface {
	GetBooks(*BooksRequest, Activity_GetBooksServer) error
	GetBookCount(context.Context, *BookCountRequest) (*BookCountResponse, error)
	BackupDatabase(context.Context, *BackupDatabaseRequest) (*BackupDatabaseResponse, error)
	OfflineSetup(context.Context, *OfflineSetupRequest) (*OfflineSetupResponse, error)
	GetUsers(*GetUsersRequest, Activity_GetUsersServer) error
	mustEmbedUnimplementedActivityServer()
}

// UnimplementedActivityServer must be embedded to have forward compatible implementations.
type UnimplementedActivityServer struct {
}

func (UnimplementedActivityServer) GetBooks(*BooksRequest, Activity_GetBooksServer) error {
	return status.Errorf(codes.Unimplemented, "method GetBooks not implemented")
}
func (UnimplementedActivityServer) GetBookCount(context.Context, *BookCountRequest) (*BookCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBookCount not implemented")
}
func (UnimplementedActivityServer) BackupDatabase(context.Context, *BackupDatabaseRequest) (*BackupDatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackupDatabase not implemented")
}
func (UnimplementedActivityServer) OfflineSetup(context.Context, *OfflineSetupRequest) (*OfflineSetupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OfflineSetup not implemented")
}
func (UnimplementedActivityServer) GetUsers(*GetUsersRequest, Activity_GetUsersServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedActivityServer) mustEmbedUnimplementedActivityServer() {}

// UnsafeActivityServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActivityServer will
// result in compilation errors.
type UnsafeActivityServer interface {
	mustEmbedUnimplementedActivityServer()
}

func RegisterActivityServer(s grpc.ServiceRegistrar, srv ActivityServer) {
	s.RegisterService(&Activity_ServiceDesc, srv)
}

func _Activity_GetBooks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BooksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ActivityServer).GetBooks(m, &activityGetBooksServer{stream})
}

type Activity_GetBooksServer interface {
	Send(*Book) error
	grpc.ServerStream
}

type activityGetBooksServer struct {
	grpc.ServerStream
}

func (x *activityGetBooksServer) Send(m *Book) error {
	return x.ServerStream.SendMsg(m)
}

func _Activity_GetBookCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).GetBookCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kogo.Activity/GetBookCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).GetBookCount(ctx, req.(*BookCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_BackupDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).BackupDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kogo.Activity/BackupDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).BackupDatabase(ctx, req.(*BackupDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_OfflineSetup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfflineSetupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActivityServer).OfflineSetup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kogo.Activity/OfflineSetup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActivityServer).OfflineSetup(ctx, req.(*OfflineSetupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Activity_GetUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetUsersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ActivityServer).GetUsers(m, &activityGetUsersServer{stream})
}

type Activity_GetUsersServer interface {
	Send(*User) error
	grpc.ServerStream
}

type activityGetUsersServer struct {
	grpc.ServerStream
}

func (x *activityGetUsersServer) Send(m *User) error {
	return x.ServerStream.SendMsg(m)
}

// Activity_ServiceDesc is the grpc.ServiceDesc for Activity service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Activity_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kogo.Activity",
	HandlerType: (*ActivityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBookCount",
			Handler:    _Activity_GetBookCount_Handler,
		},
		{
			MethodName: "BackupDatabase",
			Handler:    _Activity_BackupDatabase_Handler,
		},
		{
			MethodName: "OfflineSetup",
			Handler:    _Activity_OfflineSetup_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetBooks",
			Handler:       _Activity_GetBooks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetUsers",
			Handler:       _Activity_GetUsers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "kogo.proto",
}

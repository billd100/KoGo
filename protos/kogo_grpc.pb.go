// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package kogo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ActivityClient is the client API for Activity service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActivityClient interface {
	GetBooks(ctx context.Context, in *BooksRequest, opts ...grpc.CallOption) (Activity_GetBooksClient, error)
}

type activityClient struct {
	cc grpc.ClientConnInterface
}

func NewActivityClient(cc grpc.ClientConnInterface) ActivityClient {
	return &activityClient{cc}
}

func (c *activityClient) GetBooks(ctx context.Context, in *BooksRequest, opts ...grpc.CallOption) (Activity_GetBooksClient, error) {
	stream, err := c.cc.NewStream(ctx, &Activity_ServiceDesc.Streams[0], "/kogo.Activity/GetBooks", opts...)
	if err != nil {
		return nil, err
	}
	x := &activityGetBooksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Activity_GetBooksClient interface {
	Recv() (*Book, error)
	grpc.ClientStream
}

type activityGetBooksClient struct {
	grpc.ClientStream
}

func (x *activityGetBooksClient) Recv() (*Book, error) {
	m := new(Book)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ActivityServer is the server API for Activity service.
// All implementations must embed UnimplementedActivityServer
// for forward compatibility
type ActivityServer interface {
	GetBooks(*BooksRequest, Activity_GetBooksServer) error
	mustEmbedUnimplementedActivityServer()
}

// UnimplementedActivityServer must be embedded to have forward compatible implementations.
type UnimplementedActivityServer struct {
}

func (UnimplementedActivityServer) GetBooks(*BooksRequest, Activity_GetBooksServer) error {
	return status.Errorf(codes.Unimplemented, "method GetBooks not implemented")
}
func (UnimplementedActivityServer) mustEmbedUnimplementedActivityServer() {}

// UnsafeActivityServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActivityServer will
// result in compilation errors.
type UnsafeActivityServer interface {
	mustEmbedUnimplementedActivityServer()
}

func RegisterActivityServer(s grpc.ServiceRegistrar, srv ActivityServer) {
	s.RegisterService(&Activity_ServiceDesc, srv)
}

func _Activity_GetBooks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BooksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ActivityServer).GetBooks(m, &activityGetBooksServer{stream})
}

type Activity_GetBooksServer interface {
	Send(*Book) error
	grpc.ServerStream
}

type activityGetBooksServer struct {
	grpc.ServerStream
}

func (x *activityGetBooksServer) Send(m *Book) error {
	return x.ServerStream.SendMsg(m)
}

// Activity_ServiceDesc is the grpc.ServiceDesc for Activity service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Activity_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kogo.Activity",
	HandlerType: (*ActivityServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetBooks",
			Handler:       _Activity_GetBooks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "kogo.proto",
}
